linters:
  disable-all: true
  enable:
    ## enabled by default
    - deadcode # Finds unused code
    - errcheck # Errcheck is a program for checking for unchecked errors in go programs. These unchecked errors can be critical bugs in some cases
    - gosimple # Linter for Go source code that specializes in simplifying a code
    - govet # Vet examines Go source code and reports suspicious constructs, such as Printf calls whose arguments do not align with the format string
    - ineffassign # Detects when assignments to existing variables are not used
    - staticcheck # Staticcheck is a go vet on steroids, applying a ton of static analysis checks
    # - structcheck # Finds unused struct fields
    - typecheck # Like the front-end of a Go compiler, parses and type-checks Go code
    - unused # Checks Go code for unused constants, variables, functions and types
    - varcheck # Finds unused global variables and constants
    ## disabled by default
    - errname # Checks that sentinel errors are prefixed with the Err and error types are suffixed with the Error.
    - errorlint # errorlint is a linter for that can be used to find code that will cause problems with the error wrapping scheme introduced in Go 1.13.
    - goconst # Finds repeated strings that could be replaced by a constant
    - gocritic # Provides diagnostics that check for bugs, performance and style issues.
    # - gosec # Inspects source code for security problems
    - unconvert # Remove unnecessary type conversions
    - unparam # Reports unused function parameters
    - usestdlibvars # detect the possibility to use variables/constants from the Go standard library
    # - wastedassign # wastedassign finds wasted assignment statements.
    ## you may want to enable
    #- decorder # check declaration order and count of types, constants, variables and functions
    #- exhaustruct # Checks if all structure fields are initialized
    #- goheader # Checks is file header matches to pattern
    #- ireturn # Accept Interfaces, Return Concrete Types
    #- prealloc # [premature optimization, but can be used in some cases] Finds slice declarations that could potentially be preallocated
    #- varnamelen # [great idea, but too many false positives] checks that the length of a variable's name matches its scope
    #- wrapcheck # Checks that errors returned from external packages are wrapped
    ## disabled
    #- containedctx # containedctx is a linter that detects struct contained context.Context field
    #- depguard # [replaced by gomodguard] Go linter that checks if package imports are in a list of acceptable packages
    #- dogsled # Checks assignments with too many blank identifiers (e.g. x, _, _, _, := f())
    #- errchkjson # [don't see profit + I'm against of omitting errors like in the first example https://github.com/breml/errchkjson] Checks types passed to the json encoding functions. Reports unsupported types and optionally reports occasions, where the check for the returned error can be omitted.
    #- forcetypeassert # [replaced by errcheck] finds forced type assertions
    #- gci # Gci controls golang package import order and makes it always deterministic.
    #- godox # Tool for detection of FIXME, TODO and other comment keywords
    #- goerr113 # [too strict] Golang linter to check the errors handling expressions
    #- gofmt # [replaced by goimports] Gofmt checks whether code was gofmt-ed. By default this tool runs with -s option to check for code simplification
    #- gofumpt # [replaced by goimports, gofumports is not available yet] Gofumpt checks whether code was gofumpt-ed.
    #- grouper # An analyzer to analyze expression groups.
    #- importas # Enforces consistent import aliases
    #- maintidx # maintidx measures the maintainability index of each function.
    #- misspell # [useless] Finds commonly misspelled English words in comments
    #- nlreturn # [too strict and mostly code is not more readable] nlreturn checks for a new line before return and branch statements to increase code clarity
    #- nosnakecase # Detects snake case of variable naming and function name. # TODO: maybe enable after https://github.com/sivchari/nosnakecase/issues/14
    #- paralleltest # [too many false positives] paralleltest detects missing usage of t.Parallel() method in your Go test
    #- tagliatelle # Checks the struct tags.
    #- thelper # thelper detects golang test helpers without t.Helper() call and checks the consistency of test helpers
    #- wsl # [too strict and mostly code is not more readable] Whitespace Linter - Forces you to use empty lines!
    ## deprecated
    #- exhaustivestruct # [deprecated, replaced by exhaustruct] Checks if all struct's fields are initialized
    #- golint # [deprecated, replaced by revive] Golint differs from gofmt. Gofmt reformats Go source code, whereas golint prints out style mistakes
    #- ifshort # [deprecated, by the owner] Checks that your code uses short syntax for if-statements whenever possible
    #- interfacer # [deprecated] Linter that suggests narrower interface types
    #- maligned # [deprecated, replaced by govet fieldalignment] Tool to detect Go structs that would take less memory if their fields were sorted
    #- scopelint # [deprecated, replaced by exportloopref] Scopelint checks for unpinned variables in go programs